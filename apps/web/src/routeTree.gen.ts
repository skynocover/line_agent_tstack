/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as CallbackRouteImport } from './routes/callback'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UserIdTodoRouteImport } from './routes/$userId/todo'
import { Route as UserIdSettingsRouteImport } from './routes/$userId/settings'
import { Route as UserIdFilesRouteImport } from './routes/$userId/files'
import { Route as GroupGroupIdTodoRouteImport } from './routes/group/$groupId/todo'
import { Route as GroupGroupIdFilesRouteImport } from './routes/group/$groupId/files'

const CallbackRoute = CallbackRouteImport.update({
  id: '/callback',
  path: '/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UserIdTodoRoute = UserIdTodoRouteImport.update({
  id: '/$userId/todo',
  path: '/$userId/todo',
  getParentRoute: () => rootRouteImport,
} as any)
const UserIdSettingsRoute = UserIdSettingsRouteImport.update({
  id: '/$userId/settings',
  path: '/$userId/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const UserIdFilesRoute = UserIdFilesRouteImport.update({
  id: '/$userId/files',
  path: '/$userId/files',
  getParentRoute: () => rootRouteImport,
} as any)
const GroupGroupIdTodoRoute = GroupGroupIdTodoRouteImport.update({
  id: '/group/$groupId/todo',
  path: '/group/$groupId/todo',
  getParentRoute: () => rootRouteImport,
} as any)
const GroupGroupIdFilesRoute = GroupGroupIdFilesRouteImport.update({
  id: '/group/$groupId/files',
  path: '/group/$groupId/files',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/callback': typeof CallbackRoute
  '/$userId/files': typeof UserIdFilesRoute
  '/$userId/settings': typeof UserIdSettingsRoute
  '/$userId/todo': typeof UserIdTodoRoute
  '/group/$groupId/files': typeof GroupGroupIdFilesRoute
  '/group/$groupId/todo': typeof GroupGroupIdTodoRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/callback': typeof CallbackRoute
  '/$userId/files': typeof UserIdFilesRoute
  '/$userId/settings': typeof UserIdSettingsRoute
  '/$userId/todo': typeof UserIdTodoRoute
  '/group/$groupId/files': typeof GroupGroupIdFilesRoute
  '/group/$groupId/todo': typeof GroupGroupIdTodoRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/callback': typeof CallbackRoute
  '/$userId/files': typeof UserIdFilesRoute
  '/$userId/settings': typeof UserIdSettingsRoute
  '/$userId/todo': typeof UserIdTodoRoute
  '/group/$groupId/files': typeof GroupGroupIdFilesRoute
  '/group/$groupId/todo': typeof GroupGroupIdTodoRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/callback'
    | '/$userId/files'
    | '/$userId/settings'
    | '/$userId/todo'
    | '/group/$groupId/files'
    | '/group/$groupId/todo'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/callback'
    | '/$userId/files'
    | '/$userId/settings'
    | '/$userId/todo'
    | '/group/$groupId/files'
    | '/group/$groupId/todo'
  id:
    | '__root__'
    | '/'
    | '/callback'
    | '/$userId/files'
    | '/$userId/settings'
    | '/$userId/todo'
    | '/group/$groupId/files'
    | '/group/$groupId/todo'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CallbackRoute: typeof CallbackRoute
  UserIdFilesRoute: typeof UserIdFilesRoute
  UserIdSettingsRoute: typeof UserIdSettingsRoute
  UserIdTodoRoute: typeof UserIdTodoRoute
  GroupGroupIdFilesRoute: typeof GroupGroupIdFilesRoute
  GroupGroupIdTodoRoute: typeof GroupGroupIdTodoRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/callback': {
      id: '/callback'
      path: '/callback'
      fullPath: '/callback'
      preLoaderRoute: typeof CallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$userId/todo': {
      id: '/$userId/todo'
      path: '/$userId/todo'
      fullPath: '/$userId/todo'
      preLoaderRoute: typeof UserIdTodoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$userId/settings': {
      id: '/$userId/settings'
      path: '/$userId/settings'
      fullPath: '/$userId/settings'
      preLoaderRoute: typeof UserIdSettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$userId/files': {
      id: '/$userId/files'
      path: '/$userId/files'
      fullPath: '/$userId/files'
      preLoaderRoute: typeof UserIdFilesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/group/$groupId/todo': {
      id: '/group/$groupId/todo'
      path: '/group/$groupId/todo'
      fullPath: '/group/$groupId/todo'
      preLoaderRoute: typeof GroupGroupIdTodoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/group/$groupId/files': {
      id: '/group/$groupId/files'
      path: '/group/$groupId/files'
      fullPath: '/group/$groupId/files'
      preLoaderRoute: typeof GroupGroupIdFilesRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CallbackRoute: CallbackRoute,
  UserIdFilesRoute: UserIdFilesRoute,
  UserIdSettingsRoute: UserIdSettingsRoute,
  UserIdTodoRoute: UserIdTodoRoute,
  GroupGroupIdFilesRoute: GroupGroupIdFilesRoute,
  GroupGroupIdTodoRoute: GroupGroupIdTodoRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
